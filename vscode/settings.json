{
  "editor.fontFamily": "'JetBrains Mono', Hack, 'Fira Mono', Menlo, Monaco, 'Courier New', monospace",
  "window.title": "${activeEditorLong}",
  "git.autofetch": true,
  // open JSON editor instead of visual picker
  "workbench.settings.editor": "json",
  "workbench.settings.openDefaultSettings": false,
  "explorer.openEditors.visible": 0, // hide the open editors panel
  "editor.formatOnSave": true,
  "editor.tabCompletion": "on",
  // disable validate because of TSLint and ESLint collision
  "javascript.validate.enable": false,
  "[markdown]": {
    "editor.tabCompletion": "onlySnippets",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    },
    "editor.lineNumbers": "off",
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "emmet.includeLanguages": {
    "nunjucks": "html"
  },
  "[asciidoc]": {
    "editor.foldingStrategy": "indentation",
    "editor.lineNumbers": "off"
  },
  "flow.stopFlowOnExit": false,
  "flow.enabled": true,
  "flow.useNPMPackagedFlow": true,
  "flow.showStatus": true,
  "flow.runOnEdit": false,
  "flow.useLSP": true,
  "todohighlight.isEnable": true,
  "todohighlight.isCaseSensitive": true,
  "todohighlight.defaultStyle": {
    "color": "#FF8E8E",
    "backgroundColor": "#20242D"
  },
  "todohighlight.keywords": [
    {
      "text": "FIXME"
    },
    {
      "text": "TODO"
    },
    {
      "text": "HACK"
    }
  ],
  "window.autoDetectColorScheme": true,
  "workbench.preferredDarkColorTheme": "Catppuccin Mocha",
  "files.associations": {
    ".css": "postcss",
    "Brewfile": "ruby",
    "*.alfredappearance": "json",
    ".md": "mdx"
  },
  "vim.hlsearch": true,
  "vim.leader": "<space>",
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "j"],
      "after": ["<Esc>"]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    }
  ],
  "whichkey.bindingOverrides": [
    {
      "keys": "p.p",
      "name": "Switch Projects",
      "type": "command",
      "command": "projectManager.listProjects"
    },
    {
      "keys": "l",
      "name": "+LSP",
      "type": "object",
      "bindings": []
    },
    {
      "keys": "l.p",
      "name": "+Peek",
      "type": "object",
      "bindings": []
    },
    {
      "keys": "l.p.i",
      "name": "Peek Implementation",
      "type": "command",
      "command": "editor.action.peekImplementation"
    },
    {
      "keys": "l.p.d",
      "name": "Peek Definition",
      "type": "command",
      "command": "editor.action.peekDefinition"
    },
    {
      "keys": "l.g",
      "name": "+Goto",
      "type": "object",
      "bindings": []
    },
    {
      "keys": "l.g.d",
      "name": "Go to Definition",
      "type": "command",
      "command": "editor.action.revealDefinition"
    },
    {
      "keys": "r",
      "name": "+Refactor",
      "type": "object",
      "bindings": []
    },
    {
      "keys": "r.r",
      "name": "Rename",
      "type": "command",
      "command": "editor.action.rename"
    },
    {
      "keys": "r.m",
      "name": "Move to new file",
      "type": "command",
      "command": "editor.action.codeAction",
      "args": {
        "kind": "refactor.extract.function"
      }
    },
    {
      "keys": "a",
      "name": "+AI",
      "type": "object",
      "bindings": []
    },
    {
      "keys": "a.c",
      "name": "Claude Code",
      "type": "command",
      "command": "claude-vscode.sidebar.open"
    },
    {
      "keys": "a.o",
      "name": "Codex",
      "type": "command",
      "command": "chatgpt.openSidebar"
    },
    {
      "keys": "a.a",
      "name": "Amp Agent",
      "type": "command",
      "command": "amp.agent.toggleVisibility"
    },
    {
      "keys": "g.w",
      "name": "+Worktrees",
      "type": "object",
      "bindings": []
    },
    {
      "keys": "g.w.l",
      "name": "List Worktrees",
      "type": "command",
      "command": "git-worktrees.worktree.list"
    },
    {
      "keys": "g.w.c",
      "name": "Create Worktree",
      "type": "command",
      "command": "git-worktrees.worktree.add"
    },
    {
      "keys": "g.w.d",
      "name": "Delete Worktree",
      "type": "command",
      "command": "git-worktrees.worktree.remove"
    },
    {
      "keys": "g.w.o",
      "name": "Open Worktree",
      "type": "command",
      "command": "git-worktrees.worktree.list"
    },
    {
      "keys": "g.s",
      "name": "Source Control",
      "type": "command",
      "command": "workbench.view.scm"
    },
    {
      "keys": "w.S",
      "name": "Switch Window",
      "type": "command",
      "command": "workbench.action.switchWindow"
    }
  ],
  "vim.easymotion": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "breadcrumbs.enabled": true,
  "diffEditor.renderSideBySide": false,
  "editor.rulers": [120],
  "editor.minimap.enabled": false,
  "workbench.editor.showIcons": false,
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  "[scss]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "rust.clippy_preference": "on",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "workbench.startupEditor": "newUntitledFile",
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "diffEditor.ignoreTrimWhitespace": false,
  "cSpell.userWords": [
    "Autoformat",
    "datepicker",
    "easycron",
    "fkey",
    "formik",
    "prosemirror",
    "remirror",
    "Strikethrough",
    "typegoose",
    "ulids",
    "upsert"
  ],
  "[nunjucks]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.cursorStyle": "line",
  "editor.insertSpaces": false,
  "editor.lineNumbers": "on",
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
  "editor.wordWrap": "off",
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "gitlens.advanced.messages": {
    "suppressLineUncommittedWarning": true
  },
  /* DEMO/Screencast settings */
  // "window.zoomLevel": 2,
  // "workbench.statusBar.visible": false,
  // "editor.lineNumbers": "off",
  // "gitlens.currentLine.enabled": false,
  // "scm.diffDecorations": "none"
  // "workbench.editor.showTabs": false,
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "css.validate": false,
  "less.validate": false,
  "scss.validate": false,
  "stylelint.enable": true,
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "workbench.colorTheme": "Catppuccin Latte",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.profiles.osx": {
    "bash": {
      "path": "bash",
      "args": ["-l"],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh",
      "args": ["-l"]
    },
    "fish": {
      "path": "fish",
      "args": ["-l"]
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },
  "security.workspace.trust.untrustedFiles": "open",
  "githubPullRequests.pullBranch": "never",
  "[nginx]": {
    "editor.defaultFormatter": "raynigon.nginx-formatter"
  },
  "caddyfile.executable": "/usr/local/bin/caddy",
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "update.showReleaseNotes": false,
  "editor.inlineSuggest.enabled": true,
  "[astro]": {
    "editor.defaultFormatter": "astro-build.astro-vscode",
    "editor.tabSize": 2
  },
  "githubPullRequests.terminalLinksHandler": "github",
  "git.confirmSync": false,
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },
  "editor.largeFileOptimizations": false,
  "editor.accessibilitySupport": "off",
  "cursor.cpp.disabledLanguages": ["plaintext", "markdown", "scminput"],
  "gitlens.views.repositories.showStashes": true,
  "gitlens.views.commits.showStashes": true,
  "gitlens.views.repositories.branches.showStashes": true,
  "gitlens.views.branches.showStashes": true,
  "gitlens.views.worktrees.showStashes": true,
  "gitlens.views.workspaces.branches.showStashes": true,
  "gitlens.views.stashes.files.layout": "list",
  "gitlens.views.workspaces.showStashes": true,
  "makefile.configureOnOpen": true,
  "github.copilot.chat.showWelcome": false,
  "workbench.panel.defaultLocation": "bottom",
  "workbench.panel.opensMaximized": "never",
  "workbench.preferredLightColorTheme": "Catppuccin Latte",
  "amp.url": "https://ampcode.com/",
  "amp.tab.enabled": true,
  "editor.wordBasedSuggestions": "off",
  "chat.agent.enabled": false,
  "github.copilot.nextEditSuggestions.enabled": true,
  "workbench.statusBar.visible": false,
  "amp.permissions": [
    {
      "tool": "Bash",
      "action": "ask",
      "matches": {
        "cmd": "*git*push*"
      }
    },
    {
      "tool": "mcp__*",
      "action": "allow"
    },
    {
      "tool": "read_mcp_resource",
      "action": "allow"
    },
    {
      "tool": "tb__*",
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^(.*\\s+)?(bazel|ibazel)\\s+.*\\/\\/[^\\s]*.*$/"
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "ls",
          "ls *",
          "dir",
          "dir *",
          "cat *",
          "head *",
          "tail *",
          "less *",
          "more *",
          "grep *",
          "egrep *",
          "fgrep *",
          "tree",
          "tree *",
          "file *",
          "wc *",
          "pwd",
          "stat *",
          "du *",
          "df *",
          "ps *",
          "top",
          "htop",
          "echo *",
          "printenv *",
          "id",
          "which *",
          "whereis *",
          "date",
          "cal *",
          "uptime",
          "free *",
          "ping *",
          "dig *",
          "nslookup *",
          "host *",
          "netstat *",
          "ss *",
          "lsof *",
          "ifconfig *",
          "ip *",
          "man *",
          "info *",
          "mkdir *",
          "touch *",
          "uname *",
          "whoami",
          "go version",
          "go env *",
          "go help *",
          "cargo version",
          "cargo --version",
          "cargo help *",
          "rustc --version",
          "rustc --help",
          "rustc --explain *",
          "javac --version",
          "javac -version",
          "javac -help",
          "javac --help",
          "dotnet --info",
          "dotnet --version",
          "dotnet --help",
          "dotnet help *",
          "gcc --version",
          "gcc -v",
          "gcc --help",
          "gcc -dumpversion",
          "g++ --version",
          "g++ -v",
          "g++ --help",
          "g++ -dumpversion",
          "clang --version",
          "clang --help",
          "clang++ --version",
          "clang++ --help",
          "python -V",
          "python --version",
          "python -h",
          "python --help",
          "python3 -V",
          "python3 --version",
          "python3 -h",
          "python3 --help",
          "ruby -v",
          "ruby --version",
          "ruby -h",
          "ruby --help",
          "node -v",
          "node --version",
          "node -h",
          "node --help",
          "npm --help",
          "npm --version",
          "npm -v",
          "npm help *",
          "yarn --help",
          "yarn --version",
          "yarn -v",
          "yarn help *",
          "pnpm --help",
          "pnpm --version",
          "pnpm -v",
          "pnpm help *",
          "pytest -h",
          "pytest --help",
          "pytest --version",
          "jest --help",
          "jest --version",
          "mocha --help",
          "mocha --version",
          "make --version",
          "make --help",
          "docker --version",
          "docker --help",
          "docker version",
          "docker help *",
          "git --version",
          "git --help",
          "git help *",
          "git version"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "go test *",
          "go run *",
          "go build *",
          "go vet *",
          "go fmt *",
          "go list *",
          "cargo test *",
          "cargo run *",
          "cargo build *",
          "cargo check *",
          "cargo fmt *",
          "cargo tree *",
          "make -n *",
          "make --dry-run *",
          "mvn test *",
          "mvn verify *",
          "mvn dependency:tree *",
          "gradle tasks *",
          "gradle dependencies *",
          "gradle properties *",
          "dotnet test *",
          "dotnet list *",
          "python -c *",
          "ruby -e *",
          "node -e *",
          "npm list *",
          "npm ls *",
          "npm outdated *",
          "npm test*",
          "npm run*",
          "npm view *",
          "npm info *",
          "yarn list*",
          "yarn ls *",
          "yarn info *",
          "yarn test*",
          "yarn run *",
          "yarn why *",
          "pnpm list*",
          "pnpm ls *",
          "pnpm outdated *",
          "pnpm test*",
          "pnpm run *",
          "pytest --collect-only *",
          "jest --listTests *",
          "jest --showConfig *",
          "mocha --list *",
          "git status*",
          "git show *",
          "git diff *",
          "git grep *",
          "git branch *",
          "git tag *",
          "git remote -v *",
          "git rev-parse --is-inside-work-tree *",
          "git rev-parse --show-toplevel *",
          "git config --list *",
          "git log *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "./gradlew *",
          "./mvnw *",
          "./build.sh *",
          "./configure *",
          "cmake *",
          "./node_modules/.bin/tsc *",
          "./node_modules/.bin/eslint *",
          "./node_modules/.bin/prettier *",
          "prettier *",
          "./node_modules/.bin/tailwindcss *",
          "./node_modules/.bin/tsx *",
          "./node_modules/.bin/vite *",
          "bun *",
          "tsx *",
          "vite *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          ".venv/bin/activate *",
          ".venv/Scripts/activate *",
          "source .venv/bin/activate *",
          "source venv/bin/activate *",
          "pip list *",
          "pip show *",
          "pip check *",
          "pip freeze *",
          "uv *",
          "poetry show *",
          "poetry check *",
          "pipenv check *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "asdf list *",
          "asdf current *",
          "asdf which *",
          "mise list *",
          "mise current *",
          "mise which *",
          "mise use *",
          "rbenv version *",
          "rbenv versions *",
          "rbenv which *",
          "nvm list *",
          "nvm current *",
          "nvm which *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "./test*",
          "./run_tests.sh *",
          "./run_*_tests.sh *",
          "vitest *",
          "bundle exec rspec *",
          "bundle exec rubocop *",
          "rspec *",
          "rubocop *",
          "swiftlint *",
          "clippy *",
          "ruff *",
          "black *",
          "isort *",
          "mypy *",
          "flake8 *",
          "bandit *",
          "safety *",
          "biome check *",
          "biome format *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "rails server *",
          "rails s *",
          "bin/rails server *",
          "bin/rails s *",
          "flask run *",
          "django-admin runserver *",
          "python manage.py runserver *",
          "uvicorn *",
          "streamlit run *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "bin/rails db:status",
          "bin/rails db:version",
          "rails db:rollback *",
          "rails db:status *",
          "rails db:version *",
          "alembic current *",
          "alembic history *",
          "bundle exec rails db:status",
          "bundle exec rails db:version"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "docker ps *",
          "docker images *",
          "docker logs *",
          "docker inspect *",
          "docker info *",
          "docker stats *",
          "docker system df *",
          "docker system info *",
          "podman ps *",
          "podman images *",
          "podman logs *",
          "podman inspect *",
          "podman info *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "aws --version *",
          "aws configure list *",
          "aws sts get-caller-identity *",
          "aws s3 ls *",
          "gcloud config list *",
          "gcloud auth list *",
          "gcloud projects list *",
          "az account list *",
          "az account show *",
          "kubectl get *",
          "kubectl describe *",
          "kubectl logs *",
          "kubectl version *",
          "helm list *",
          "helm status *",
          "helm version *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "swift build *",
          "swift test *",
          "zig build *",
          "zig build test*",
          "kotlinc *",
          "scalac *",
          "javac *",
          "javap *",
          "clang *",
          "jar *",
          "sbt *",
          "gradle *",
          "bazel build *",
          "bazel test *",
          "bazel run *",
          "mix *",
          "lua *",
          "ruby *",
          "php *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "mkdir -p *",
          "chmod +x *",
          "dos2unix *",
          "unix2dos *",
          "ln -s *"
        ]
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": [
          "for *",
          "while *",
          "do *",
          "done *",
          "if *",
          "then *",
          "else *",
          "elif *",
          "fi *",
          "case *",
          "esac *",
          "in *",
          "function *",
          "select *",
          "until *",
          "{ *",
          "} *",
          "[[ *",
          "]] *"
        ]
      },
      "action": "ask"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^find(?!.*(-delete|-exec|-execdir)).*$/"
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^(echo|ls|pwd|date|whoami|id|uname)\\s.*[&|;].*\\s*(echo|ls|pwd|date|whoami|id|uname)($|\\s.*)/"
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^(cat|grep|head|tail|less|more|find)\\s.*\\|\\s*(grep|head|tail|less|more|wc|sort|uniq)($|\\s.*)/"
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^rm\\s+.*(-[rf].*-[rf]|-[rf]{2,}|--recursive.*--force|--force.*--recursive).*$/"
      },
      "action": "ask"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^find.*(-delete|-exec|-execdir).*$/"
      },
      "action": "ask"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^(ls|cat|grep|head|tail|file|stat)\\s+[^/]*$/"
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/^(?!.*(rm|mv|cp|chmod|chown|sudo|su|dd)\\b).*/dev/(null|zero|stdout|stderr|stdin).*$/"
      },
      "action": "allow"
    },
    {
      "tool": "Bash",
      "matches": {
        "cmd": "/(^|\\s)(\\/(?!dev\\/(null|zero|stdout|stderr|stdin))[^\\s]*|\\.\\.\\/)(?![^\\s]*\\.(log|txt|md|json|yml|yaml)$)/"
      },
      "action": "ask"
    },
    {
      "tool": "Bash",
      "action": "ask"
    },
    {
      "tool": "Glob",
      "action": "allow"
    },
    {
      "tool": "Task",
      "action": "allow"
    },
    {
      "tool": "chat_llm",
      "action": "allow"
    },
    {
      "tool": "finder",
      "action": "allow"
    },
    {
      "tool": "fast_finder",
      "action": "allow"
    },
    {
      "tool": "xai_finder",
      "action": "allow"
    },
    {
      "tool": "kimiK2_finder",
      "action": "allow"
    },
    {
      "tool": "gossip_finder",
      "action": "allow"
    },
    {
      "tool": "sonoma_finder",
      "action": "allow"
    },
    {
      "tool": "get_diagnostics",
      "action": "allow"
    },
    {
      "tool": "Bash",
      "action": "allow"
    },
    {
      "tool": "oracle",
      "action": "allow"
    },
    {
      "tool": "mermaid",
      "action": "allow"
    },
    {
      "tool": "todo_read",
      "action": "allow"
    },
    {
      "tool": "todo_write",
      "action": "allow"
    },
    {
      "tool": "read_web_page",
      "action": "allow"
    },
    {
      "tool": "run_javascript",
      "action": "allow"
    },
    {
      "tool": "create_file",
      "action": "allow"
    },
    {
      "tool": "glob",
      "action": "allow"
    },
    {
      "tool": "Glob",
      "action": "allow"
    },
    {
      "tool": "undo_edit",
      "action": "allow"
    },
    {
      "tool": "Read",
      "action": "allow"
    },
    {
      "tool": "edit_file",
      "action": "allow"
    },
    {
      "tool": "format_file",
      "action": "allow"
    },
    {
      "tool": "web_search",
      "action": "allow"
    },
    {
      "tool": "Grep",
      "action": "allow"
    },
    {
      "tool": "search_documents",
      "action": "allow"
    },
    {
      "tool": "get_document",
      "action": "allow"
    },
    {
      "tool": "Check",
      "action": "allow"
    },
    {
      "tool": "code_review",
      "action": "allow"
    },
    {
      "tool": "librarian",
      "action": "allow"
    }
  ],
  "claudeCode.useTerminal": true
}
